# bot/handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from .states import BattleStates
from creatures import Player, Monster
from creatures.creature import Creature
import random
import asyncio
import os
import json
import aiosqlite
from .database import get_player_name, save_player_name, save_game_state, load_game_state
from .dungeon import Dungeon

player_names_db = {}
router = Router()

# üéõÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
def get_battle_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥", callback_data="next_round")],
        [InlineKeyboardButton(text="üíä –ò—Å—Ü–µ–ª–∏—Ç—å—Å—è", callback_data="heal")],
        [InlineKeyboardButton(text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data="surrender")]
    ])

def get_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–æ–π", callback_data="start_fight")]
    ])

@router.message(Command("restore"))
async def cmd_restore(message: Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restore <–∏–º—è_—Ñ–∞–π–ª–∞>")
        return

    filename = f"saves/{args[1]}"
    if not os.path.exists(filename):
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(filename, 'r', encoding='utf-8') as f:
        backup_data = json.load(f)


    dungeon_data = backup_data["dungeon"]
    player_data = backup_data["player"]
    name = backup_data["name"]

    await save_player_name(user_id, name)

    async with aiosqlite.connect("players.db") as db:
        await db.execute("""
            UPDATE players SET dungeon_state = ?, player_state = ? WHERE user_id = ?
        """, (json.dumps(dungeon_data), json.dumps(player_data), user_id))
        await db.commit()

    await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ {args[1]} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await cmd_start(message, state)  

@router.message(Command("rename"))
async def cmd_rename(message: Message, state: FSMContext):
    await state.set_state(BattleStates.awaiting_player_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è:")

# üèÅ /start ‚Äî –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(Command("start"), StateFilter(default_state, BattleStates))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    player_name = await get_player_name(user_id)

    if player_name:
        await state.update_data(player_name=player_name)
        # ‚úÖ –°—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–∑–µ–º–µ–ª—å–µ
        await enter_dungeon_automatically(message, state, player_name)
    else:
        await state.set_state(BattleStates.awaiting_player_name)
        await message.answer(
            "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Creature Battle Bot!*\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–∞–π—Ç–µ', '–ú–Ω–µ','–†–∞–±–æ—Ç—É –ø–∂'):"
        )
#Forward name
@router.message(StateFilter(BattleStates.awaiting_player_name), F.text)
async def player_name_received(message: Message, state: FSMContext):
    player_name = message.text.strip()

    if len(player_name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    if len(player_name) > 20:
        await message.answer("‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    user_id = message.from_user.id
    await save_player_name(user_id, player_name)

    # ‚úÖ –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
    await enter_dungeon_automatically(message, state, player_name)

#–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è, —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–æ    
async def enter_dungeon_automatically(message: Message, state: FSMContext, player_name: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –ø–æ—Å–ª–µ /start ‚Äî —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    game_state = await load_game_state(user_id)
    
    if game_state:
        dungeon, player = game_state
        text = f"üßô *{player_name}*, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n–í–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
        player = Player(
            attack=random.randint(10, 25),
            defense=random.randint(5, 20),
            max_health=random.randint(80, 150),
            damage_range=(random.randint(3, 7), random.randint(8, 15))
        )
        dungeon = Dungeon(width=5, height=5)
        text = (
            f"üßô *{player_name}*, —Ö—Ä–∞–±—Ä—ã–π –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!\n"
            f"–í—ã —Å—Ç–æ–∏—Ç–µ —É –≤—Ö–æ–¥–∞ –≤ *–ó–∞–±—ã—Ç–æ–µ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –ó–∞–≥–∞–¥–æ–∫*...\n"
            f"–ì–æ–≤–æ—Ä—è—Ç, –≤ –µ–≥–æ –≥–ª—É–±–∏–Ω–∞—Ö —Å–ø—Ä—è—Ç–∞–Ω—ã —Å–æ–∫—Ä–æ–≤–∏—â–∞ –¥—Ä–µ–≤–Ω–∏—Ö –∫–æ—Ä–æ–ª–µ–π."
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(
        player=player,
        player_name=player_name,
        dungeon=dungeon
    )
    await state.set_state(BattleStates.in_dungeon)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º)
    await save_game_state(user_id, dungeon, player)

    current_room = dungeon.get_current_room()
    directions = dungeon.get_available_directions()

    keyboard_buttons = []
    dir_map = {"‚¨ÜÔ∏è –í–≤–µ—Ä—Ö": "up", "‚¨áÔ∏è –í–Ω–∏–∑": "down", "‚¨ÖÔ∏è –ù–∞–ª–µ–≤–æ": "left", "‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–æ": "right"}
    for dir_text in directions:
        dir_key = dir_map.get(dir_text)
        if dir_key:
            keyboard_buttons.append([InlineKeyboardButton(text=dir_text, callback_data=f"move_{dir_key}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    text += (
        f"\n\nüó∫Ô∏è *–í–∞—à–∞ –∫–∞—Ä—Ç–∞:*\n\n"
        f"{dungeon.render_map()}\n\n"
        f"üõ°Ô∏è –í–∞—à–∏ —Å—Ç–∞—Ç—ã: ATK={player.attack}, DEF={player.defense}, "
        f"HP={player.current_health}/{player.max_health}\n"
        f"üìç *–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞:* {current_room.room_type.upper()}\n"
        f"‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å:"
    )

    await message.answer(text, reply_markup=keyboard)
#–î–≤–∏–∂–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("move_"), StateFilter(BattleStates.in_dungeon))
async def handle_move(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    dungeon: Dungeon = data["dungeon"]

    direction = callback.data.split("_")[1]

    if dungeon.move_player(direction):
        current_room = dungeon.get_current_room()
        current_room.visited = True

        # ‚úÖ –£–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –±–ª–æ–∫ –∑–¥–µ—Å—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –Ω–∏–∂–µ

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        directions = dungeon.get_available_directions()
        keyboard_buttons = []
        dir_map = {"‚¨ÜÔ∏è –í–≤–µ—Ä—Ö": "up", "‚¨áÔ∏è –í–Ω–∏–∑": "down", "‚¨ÖÔ∏è –ù–∞–ª–µ–≤–æ": "left", "‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–æ": "right"}
        for dir_text in directions:
            dir_key = dir_map.get(dir_text)
            if dir_key:
                keyboard_buttons.append([InlineKeyboardButton(text=dir_text, callback_data=f"move_{dir_key}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        room_text = ""
        if current_room.room_type == "monster":
            # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–Ω—Å—Ç—Ä–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π
            monster = Monster(
                attack=random.randint(8, 22),
                defense=random.randint(3, 18),
                max_health=random.randint(60, 130),
                damage_range=(random.randint(2, 6), random.randint(7, 13))
            )
            await state.update_data(monster=monster, round_num=1)
            await state.set_state(BattleStates.in_battle)

            text = (
                f"üëπ *–ë–û–ô –° –ú–û–ù–°–¢–†–û–ú!*\n\n"
                f"–ó–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞: {monster.current_health}/{monster.max_health}\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ ‚û°Ô∏è *–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥*, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )
            await callback.message.edit_text(text, reply_markup=get_battle_keyboard())
            return  # ‚úÖ –í–∞–∂–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É

        elif current_room.room_type == "treasure":
            room_text = "üí∞ *–í–´ –ù–ê–®–õ–ò –°–û–ö–†–û–í–ò–©–ï!* +50 –º–æ–Ω–µ—Ç!"
        elif current_room.room_type == "trap":
            room_text = "üíÄ *–õ–û–í–£–®–ö–ê!* –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 20 HP."
        elif current_room.room_type == "exit":
            room_text = "üèÜ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ù–ê–®–õ–ò –°–û–ö–†–û–í–ò–©–ù–ò–¶–£!*"
            await state.set_state(BattleStates.not_in_battle)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
        text = (
            f"üó∫Ô∏è *–ö–ê–†–¢–ê –ü–û–î–ó–ï–ú–ï–õ–¨–Ø*\n\n"
            f"{dungeon.render_map()}\n\n"
            f"{room_text}\n"
            f"–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: *{current_room.room_type.upper()}*\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    else:
        await callback.answer("–¢—É–¥–∞ –Ω–µ–ª—å–∑—è –∏–¥—Ç–∏!", show_alert=True)

    await callback.answer()
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    user_id = callback.from_user.id
    data = await state.get_data()
    player = data["player"]
    dungeon = data["dungeon"]
    await save_game_state(user_id, dungeon, player)
#newgame
@router.message(Command("newgame"))
async def cmd_newgame(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —Å—Ç–∏—Ä–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    data = await state.get_data()
    player_name = data.get("player_name")

    if not player_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
    player = Player(
        attack=random.randint(10, 25),
        defense=random.randint(5, 20),
        max_health=random.randint(80, 150),
        damage_range=(random.randint(3, 7), random.randint(8, 15))
    )
    dungeon = Dungeon(width=5, height=5)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –∏ –ë–î
    await state.update_data(player=player, player_name=player_name, dungeon=dungeon)
    await state.set_state(BattleStates.in_dungeon)
    await save_game_state(user_id, dungeon, player)

    current_room = dungeon.get_current_room()
    directions = dungeon.get_available_directions()

    keyboard_buttons = []
    dir_map = {"‚¨ÜÔ∏è –í–≤–µ—Ä—Ö": "up", "‚¨áÔ∏è –í–Ω–∏–∑": "down", "‚¨ÖÔ∏è –ù–∞–ª–µ–≤–æ": "left", "‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–æ": "right"}
    for dir_text in directions:
        dir_key = dir_map.get(dir_text)
        if dir_key:
            keyboard_buttons.append([InlineKeyboardButton(text=dir_text, callback_data=f"move_{dir_key}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    text = (
        f"üÜï *–ù–û–í–û–ï –ü–†–ò–ö–õ–Æ–ß–ï–ù–ò–ï!*\n"
        f"üßô {player_name}, –≤—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –Ω–æ–≤–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!\n\n"
        f"üó∫Ô∏è *–ö–∞—Ä—Ç–∞:*\n\n"
        f"{dungeon.render_map()}\n\n"
        f"üõ°Ô∏è –°—Ç–∞—Ç—ã: ATK={player.attack}, DEF={player.defense}, HP={player.current_health}/{player.max_health}\n"
        f"üìç –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: {current_room.room_type.upper()}\n"
        f"‚û°Ô∏è –í–ø–µ—Ä—ë–¥, –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!"
    )

    await message.answer(text, reply_markup=keyboard)

# üé≤ –ù–∞—á–∞–ª–æ –±–æ—è
@router.callback_query(F.data == "start_fight", StateFilter(BattleStates.not_in_battle))
async def start_fight(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_name = data.get("player_name", "–ò–≥—Ä–æ–∫")  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –º–æ–Ω—Å—Ç—Ä–∞
    player = Player(
        attack=random.randint(10, 25),
        defense=random.randint(5, 20),
        max_health=random.randint(80, 150),
        damage_range=(random.randint(3, 7), random.randint(8, 15))
    )

    monster = Monster(
        attack=random.randint(8, 22),
        defense=random.randint(3, 18),
        max_health=random.randint(60, 130),
        damage_range=(random.randint(2, 6), random.randint(7, 13))
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(player=player, monster=monster, round_num=1, player_name=player_name)

    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(BattleStates.in_battle)

    # üé® –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
    text = (
        f"‚öîÔ∏è *–ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!* ‚öîÔ∏è\n\n"
        f"üßô *{player_name}*:\n"
        f"  üõ°Ô∏è –ê—Ç–∞–∫–∞: {player.attack}\n"
        f"  üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {player.defense}\n"
        f"  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player.current_health}/{player.max_health}\n"
        f"  üí• –£—Ä–æ–Ω: {player.damage_range[0]}‚Äì{player.damage_range[1]}\n"
        f"  üßπ –ò—Å—Ü–µ–ª–µ–Ω–∏–π: {player.heal_uses_left}\n\n"
        f"üëπ *–ú–æ–Ω—Å—Ç—Ä*:\n"
        f"  üõ°Ô∏è –ê—Ç–∞–∫–∞: {monster.attack}\n"
        f"  üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {monster.defense}\n"
        f"  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster.current_health}/{monster.max_health}\n"
        f"  üí• –£—Ä–æ–Ω: {monster.damage_range[0]}‚Äì{monster.damage_range[1]}\n\n"
        f"‚û°Ô∏è *–ù–∞–∂–º–∏—Ç–µ ¬´–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ–∏!*"
    )

    await callback.message.edit_text(text, reply_markup=get_battle_keyboard())
    await callback.answer()
# üîÑ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
@router.callback_query(F.data == "next_round", StateFilter(BattleStates.in_battle))
async def next_round(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player = data["player"]
    monster = data["monster"]
    round_num = data["round_num"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –±–æ–π —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω (–Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è)
    if not player.is_alive() or not monster.is_alive():
        await finish_battle(callback, state)
        return

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—É–Ω–¥–∞ ===
    lines = [f"=== üéØ –†–ê–£–ù–î {round_num} ==="]
    lines.append(f"‚ù§Ô∏è –ò–≥—Ä–æ–∫: {player.current_health}/{player.max_health} | üßπ –ò—Å—Ü–µ–ª–µ–Ω–∏–π: {player.heal_uses_left}")
    lines.append(f"‚ù§Ô∏è –ú–æ–Ω—Å—Ç—Ä: {monster.current_health}/{monster.max_health}")
    lines.append("-" * 30)

    # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
    lines.append("\nüëâ *–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç...*")
    success, dice_results = player.attack_target(monster)  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ—Å–∫–∏
    dice_str = ", ".join(map(str, dice_results))
    lines.append(f"üé≤ –ë—Ä–æ—Å–æ–∫ (4d6): [{dice_str}]")

    if success:
        lines.append("‚úÖ *–ü–æ–ø–∞–¥–∞–Ω–∏–µ!* (–≤—ã–ø–∞–ª–æ 5 –∏–ª–∏ 6)")
    else:
        lines.append("‚ùå *–ü—Ä–æ–º–∞—Ö!* (–Ω–∏ –æ–¥–Ω–æ–≥–æ 5 –∏–ª–∏ 6)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä —É–º–µ—Ä ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π
    if not monster.is_alive():
        lines.append("\nüèÜ *–ú–æ–Ω—Å—Ç—Ä –ø–æ–≤–µ—Ä–∂–µ–Ω!*")
        await callback.message.edit_text("\n".join(lines))
        await finish_battle(callback, state, winner="player")
        return  # ‚úÖ –í–´–•–û–î–ò–ú ‚Äî –º–æ–Ω—Å—Ç—Ä –º—ë—Ä—Ç–≤, –Ω–µ –¥–∞—ë–º –µ–º—É –∞—Ç–∞–∫–æ–≤–∞—Ç—å

    # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–∏–≤
    if monster.is_alive():
        lines.append("\nüëπ *–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç...*")
        success, dice_results = monster.attack_target(player)  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ—Å–∫–∏
        dice_str = ", ".join(map(str, dice_results))
        lines.append(f"üé≤ –ë—Ä–æ—Å–æ–∫ (4d6): [{dice_str}]")

        if success:
            lines.append("üí• *–ü–æ–ø–∞–¥–∞–Ω–∏–µ!*")
        else:
            lines.append("üõ°Ô∏è *–£–∫–ª–æ–Ω–µ–Ω–∏–µ!*")
    else:
        lines.append("\nüèÜ *–ú–æ–Ω—Å—Ç—Ä —É–∂–µ –º—ë—Ä—Ç–≤!*")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(player=player, monster=monster, round_num=round_num + 1)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("\n".join(lines), reply_markup=get_battle_keyboard())
    await callback.answer()

# üíä –ò—Å—Ü–µ–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "heal", StateFilter(BattleStates.in_battle))
async def heal_player(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player = data["player"]

    if not player.is_alive():
        await callback.answer("üòµ –í—ã –º–µ—Ä—Ç–≤—ã!", show_alert=True)
        return

    if player.current_health >= player.max_health * 0.5 and player.heal_uses_left > 0:
        await callback.answer("‚ú® –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–∞–∫ –≤—ã—à–µ 50% ‚Äî —ç–∫–æ–Ω–æ–º—å—Ç–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è!", show_alert=True)
        return

    if player.heal():
        healed = int(Player.HEAL_PERCENT * player.max_health)
        await callback.answer(f"‚ú® +{healed} HP! –¢–µ–ø–µ—Ä—å: {player.current_health}/{player.max_health}", show_alert=True)
        await state.update_data(player=player)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    else:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∏—Å—Ü–µ–ª–∏—Ç—å—Å—è (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω)", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å, –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ç–∞–ª–æ >50%
    await callback.message.edit_reply_markup(reply_markup=get_battle_keyboard())

# –ü–æ–¥–∑–µ–º–µ–ª—å–µ
#@router.message(Command("dungeon"), StateFilter(BattleStates.not_in_battle))
#async def cmd_dungeon(message: Message, state: FSMContext):
#    ...
#    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
#    dungeon = Dungeon(width=5, height=5)
#
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
#    await state.update_data(dungeon=dungeon)
#    await state.set_state(BattleStates.in_dungeon)
#
#    current_room = dungeon.get_current_room()
#    directions = dungeon.get_available_directions()
#
#    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#    keyboard = InlineKeyboardMarkup(inline_keyboard=[
#        [InlineKeyboardButton(text=dir_text, callback_data=f"move_{dir_key}")]
#        for dir_text, dir_key in zip(directions, ["up", "down", "left", "right"][:len(directions)])
#    ])

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    #text = (
    #    f"üó∫Ô∏è *–ö–ê–†–¢–ê –ü–û–î–ó–ï–ú–ï–õ–¨–Ø*\n\n"
   #     f"{dungeon.render_map()}\n\n"
  #      f"–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ: *{current_room.room_type.upper()}*\n"
 #       f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
 #   )
#
#    await message.answer(text, reply_markup=keyboard)

# üè≥Ô∏è –°–¥–∞—Ç—å—Å—è
@router.callback_query(F.data == "surrender", StateFilter(BattleStates.in_battle))
async def surrender(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BattleStates.battle_finished)
    await callback.message.edit_text(
        "üïäÔ∏è –í—ã —Å–¥–∞–ª–∏—Å—å. –ú–æ–Ω—Å—Ç—Ä —Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç!\n\n–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π ‚Äî /start",
        reply_markup=None
    )
    await callback.answer()

# üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è
async def finish_battle(callback: CallbackQuery, state: FSMContext, winner: str = None):
    data = await state.get_data()
    player = data["player"]
    monster = data["monster"]
    player_name = data.get("player_name", "–ò–≥—Ä–æ–∫")

    if winner == "player" or (player.is_alive() and not monster.is_alive()):
        result = "üéâ *–ü–û–ë–ï–î–ê –ò–ì–†–û–ö–ê!* üéâ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –±–æ–π –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
        current_state = await state.get_state()
        if current_state == BattleStates.in_battle.state:
            dungeon_data = data.get("dungeon")
            if dungeon_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
                await state.set_state(BattleStates.in_dungeon)

                dungeon: Dungeon = dungeon_data
                current_room = dungeon.get_current_room()
                directions = dungeon.get_available_directions()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_buttons = []
                dir_map = {
                    "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö": "up",
                    "‚¨áÔ∏è –í–Ω–∏–∑": "down",
                    "‚¨ÖÔ∏è –ù–∞–ª–µ–≤–æ": "left",
                    "‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–æ": "right"
                }
                for dir_text in directions:
                    dir_key = dir_map.get(dir_text)
                    if dir_key:
                        keyboard_buttons.append([
                            InlineKeyboardButton(text=dir_text, callback_data=f"move_{dir_key}")
                        ])

                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                # –°–æ–æ–±—â–µ–Ω–∏–µ
                text = (
                    f"üó∫Ô∏è *–ö–ê–†–¢–ê –ü–û–î–ó–ï–ú–ï–õ–¨–Ø*\n\n"
                    f"{dungeon.render_map()}\n\n"
                    f"‚úÖ *–ú–æ–Ω—Å—Ç—Ä –ø–æ–≤–µ—Ä–∂–µ–Ω!*\n"
                    f"–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: *{current_room.room_type.upper()}*\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
                )

                await callback.message.edit_text(text, reply_markup=keyboard)
                return  # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ

    else:
        result = "üíÄ *–ú–û–ù–°–¢–† –ü–û–ë–ï–î–ò–õ!* üíÄ"

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –±–æ—è (–µ—Å–ª–∏ –Ω–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ)
    text = (
        f"{result}\n\n"
        f"üßô *{player_name}*: {player.current_health}/{player.max_health} ‚ù§Ô∏è\n"
        f"üëπ *–ú–æ–Ω—Å—Ç—Ä*: {monster.current_health}/{monster.max_health} ‚ù§Ô∏è\n\n"
        f"–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π ‚Äî /start"
    )

    await callback.message.edit_text(text, reply_markup=None)
    await callback.answer()