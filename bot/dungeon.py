# bot/dungeon.py
import random

class Room:
    def __init__(self, x: int, y: int, room_type: str = "empty"):
        self.x = x
        self.y = y
        self.room_type = room_type  # "empty", "monster", "treasure", "trap", "start", "exit"
        self.visited = False

class Dungeon:
    def __init__(self, width: int = 5, height: int = 5):
        self.width = width
        self.height = height
        self.rooms = {}
        self.player_x = 0
        self.player_y = 0
        self.generate_dungeon()

    def generate_dungeon(self):
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É –∫–æ–º–Ω–∞—Ç
        for x in range(self.width):
            for y in range(self.height):
                room_type = "empty"
                # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
                if x == 0 and y == 0:
                    room_type = "start"
                # –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º —É–≥–ª—É
                elif x == self.width - 1 and y == self.height - 1:
                    room_type = "exit"
                else:
                    # –°–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤, –ª–æ–≤—É—à–∫–∏, —Å–æ–∫—Ä–æ–≤–∏—â–∞
                    rand = random.random()
                    if rand < 0.4:
                        room_type = "monster"
                    elif rand < 0.6:
                        room_type = "treasure"
                    elif rand < 0.7:
                        room_type = "trap"

                self.rooms[(x, y)] = Room(x, y, room_type)

    def get_current_room(self) -> Room:
        return self.rooms.get((self.player_x, self.player_y))

    def move_player(self, direction: str) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ."""
        dx, dy = 0, 0
        if direction == "up" and self.player_y > 0:
            dy = -1
        elif direction == "down" and self.player_y < self.height - 1:
            dy = 1
        elif direction == "left" and self.player_x > 0:
            dx = -1
        elif direction == "right" and self.player_x < self.width - 1:
            dx = 1
        else:
            return False  # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏

        self.player_x += dx
        self.player_y += dy
        return True

    def get_available_directions(self) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è."""
        directions = []
        if self.player_y > 0:
            directions.append("‚¨ÜÔ∏è –í–≤–µ—Ä—Ö")
        if self.player_y < self.height - 1:
            directions.append("‚¨áÔ∏è –í–Ω–∏–∑")
        if self.player_x > 0:
            directions.append("‚¨ÖÔ∏è –ù–∞–ª–µ–≤–æ")
        if self.player_x < self.width - 1:
            directions.append("‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–æ")
        return directions

    def render_map(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –ø–æ–¥–∑–µ–º–µ–ª—å—è."""
        lines = []
        for y in range(self.height):
            row = []
            for x in range(self.width):
                if x == self.player_x and y == self.player_y:
                    row.append("üßô")  # –ò–≥—Ä–æ–∫
                elif self.rooms[(x, y)].visited:
                    room = self.rooms[(x, y)]
                    if room.room_type == "monster":
                        row.append("üëπ")
                    elif room.room_type == "treasure":
                        row.append("üí∞")
                    elif room.room_type == "trap":
                        row.append("üíÄ")
                    elif room.room_type == "exit":
                        row.append("üèÜ")
                    else:
                        row.append("‚¨ú")
                else:
                    row.append("‚¨õ")  # –ù–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
            lines.append("".join(row))
        return "\n".join(lines)