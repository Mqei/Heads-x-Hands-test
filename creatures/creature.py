import random
from typing import Tuple

class Creature:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤ –≤ –∏–≥—Ä–µ: –ò–≥—Ä–æ–∫ –∏ –ú–æ–Ω—Å—Ç—Ä.
    """

    def __init__(self, attack: int, defense: int, max_health: int, damage_range: Tuple[int, int]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–∞.

        :param attack: –ê—Ç–∞–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30)
        :param defense: –ó–∞—â–∏—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30)
        :param max_health: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ > 0)
        :param damage_range: –î–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–Ω–∞ ‚Äî –∫–æ—Ä—Ç–µ–∂ (min_damage, max_damage), –≥–¥–µ min <= max, –∏ –æ–±–∞ > 0
        :raises ValueError: –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        """
        self._validate_stats(attack, defense, max_health, damage_range)

        self._attack = attack
        self._defense = defense
        self._max_health = max_health
        self._current_health = max_health
        self._damage_range = damage_range

    def _validate_stats(self, attack, defense, max_health, damage_range):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        if not isinstance(attack, int) or not (1 <= attack <= 30):
            raise ValueError("–ê—Ç–∞–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 30")
        if not isinstance(defense, int) or not (1 <= defense <= 30):
            raise ValueError("–ó–∞—â–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 30")
        if not isinstance(max_health, int) or max_health <= 0:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (> 0)")
        if (not isinstance(damage_range, tuple) or len(damage_range) != 2 or
            not all(isinstance(x, int) and x > 0 for x in damage_range) or
            damage_range[0] > damage_range[1]):
            raise ValueError("–£—Ä–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º –∏–∑ –¥–≤—É—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª (min, max), –≥–¥–µ min <= max")

    @property
    def attack(self) -> int:
        return self._attack

    @property
    def defense(self) -> int:
        return self._defense

    @property
    def max_health(self) -> int:
        return self._max_health

    @property
    def current_health(self) -> int:
        return self._current_health

    @property
    def damage_range(self) -> Tuple[int, int]:
        return self._damage_range

    def is_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤–æ –ª–∏ —Å—É—â–µ—Å—Ç–≤–æ."""
        return self._current_health > 0

    def take_damage(self, damage: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω. –ó–¥–æ—Ä–æ–≤—å–µ –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ 0.

        :param damage: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
        """
        if not isinstance(damage, int) or damage < 0:
            raise ValueError("–£—Ä–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        if not self.is_alive():
            return

        self._current_health = max(0, self._current_health - damage)

    def _roll_dice(self, num_dice: int) -> list[int]:
        """
        –ë—Ä–æ—Å–∏—Ç—å N —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤.

        :param num_dice: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ (>= 1)
        :return: —Å–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """
        if num_dice < 1:
            raise ValueError("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—Ä–æ—à–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É–±–∏–∫")
        return [random.randint(1, 6) for _ in range(num_dice)]

    def attack_target(self, target: 'Creature') -> bool:
        """
        –ê—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å—É—â–µ—Å—Ç–≤–æ.

        –ê–ª–≥–æ—Ä–∏—Ç–º:
          1. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Ç–∞–∫–∏ = attack - defense —Ü–µ–ª–∏ + 1 (–º–∏–Ω–∏–º—É–º 1)
          2. –ë—Ä–æ—Å–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∫—É–±–∏–∫–æ–≤ d6, —Å–∫–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
          3. –£—Å–ø–µ—Ö ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É–±–∏–∫ 5 –∏–ª–∏ 6
          4. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî –Ω–∞–Ω–æ—Å–∏–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–Ω –∏–∑ damage_range

        :param target: —Ü–µ–ª—å –∞—Ç–∞–∫–∏ (–æ–±—ä–µ–∫—Ç Creature)
        :return: True, –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        if not isinstance(target, Creature):
            raise TypeError("–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∫–ª–∞—Å—Å–∞ Creature")
        if not self.is_alive():
            raise ValueError("–ú–µ—Ä—Ç–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å")
        if not target.is_alive():
            return False

        # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        attack_modifier = self.attack - target.defense + 1
        num_dice = max(1, attack_modifier)  # –º–∏–Ω–∏–º—É–º 1 –∫—É–±–∏–∫

        # 2. –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏
        dice_results = self._roll_dice(num_dice)

        # üé≤ –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        print(f"–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ ({num_dice}d6): {dice_results}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
        success = any(die >= 5 for die in dice_results)

        # 4. –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ ‚Äî –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        if success:
            min_dmg, max_dmg = self.damage_range
            damage_dealt = random.randint(min_dmg, max_dmg)
            target.take_damage(damage_dealt)
            print(f"üí• –ù–∞–Ω–µ—Å–µ–Ω–æ {damage_dealt} —É—Ä–æ–Ω–∞. –ó–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–∏: {target.current_health}")
        else:
            print("üõ°Ô∏è –ü—Ä–æ–º–∞—Ö! –ù–∏ –æ–¥–∏–Ω –∫—É–±–∏–∫ –Ω–µ –ø–æ–∫–∞–∑–∞–ª 5 –∏–ª–∏ 6.")

        return success

    def __str__(self):
        return (f"{self.__class__.__name__}(ATK={self.attack}, DEF={self.defense}, "
                f"HP={self.current_health}/{self.max_health}, DMG={self.damage_range[0]}-{self.damage_range[1]})")